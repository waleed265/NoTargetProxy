name: Apigee_CICD_Pipeline_MAF_PullRequest_Closed(Merged)
on:
  pull_request:
    types: [closed]
    branches:
    - sandbox
    - dev
    - uat
  
env:
  ProxyName: ${{ github.event.repository.name }}    #Setting Repository Name as Proxy Name #ProxyName: NoTargetProxy
  ORG: maf-holding
  machine_apigeeUsername: ${{ secrets.machine_apigeeUsername }}
  machine_apigeePassword: ${{ secrets.machine_apigeePassword }}
  SAML_BASIC: ${{ secrets.SAML_BASIC }}
  # proxy_basepath: ${{ secrets.proxy_basepath }}
  # api_product: Cicd-Prod-Product
  # developer: hr@api.com
  # app: hrapp
  LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}
  
jobs:

   Deployment:
   # this job will only run if the PR has been merged
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.step1.outputs.stable_revision_number }}
      output2: ${{ steps.env.outputs.ENV }}
    steps:
     - name: Checkout Repository
       uses: actions/checkout@v2
       
     - name: Get branch name (pull request)
       if: github.event_name == 'pull_request'
       shell: bash
       run: |
        echo "TARGET_BRANCH_NAME=$(echo ${GITHUB_BASE_REF} | tr / -)" >> $GITHUB_ENV
        echo "SOURCE_BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

     - name: Pull Request Branch Validation
       shell: bash
       run: bash ./apigee-cicd-master/scripts/pullRequest_validation.sh
       
     - name: Setting Apigee Environment from base branch
       if: github.event_name == 'pull_request'
       shell: bash
       run: echo "ENV=$(echo ${GITHUB_BASE_REF} | tr / -)" >> $GITHUB_ENV

     - name: Debug
       run: echo ${{ env.ENV }} 
       
     - name: Setting $ENV as output for passing it to next job
       id: env
       run: echo "::set-output name=ENV::$ENV"
      
     - name: Checking Current Stable Revision
       run: bash ./apigee-cicd-master/scripts/revision.sh
       shell: bash
      
     - name: Echo Current Stable Revision
       id: step1
       run: echo "::set-output name=stable_revision_number::$stable_revision_number"
      
     - name: Decrypt edge.json file
       run: bash ./apigee-cicd-master/scripts/decrypt_secret.sh
       shell: bash
      
     - name: Deploy Proxy
       run: mvn clean install -f ${{ github.workspace }}/apigee-cicd-master/${{ env.ProxyName }}/pom.xml -P${{ env.ENV }} -Dusername=${{ env.machine_apigeeUsername }} -Dpassword=${{ env.machine_apigeePassword }} -Dorg=${{ env.ORG }} -Dapigee.config.options=none #-Dapigee.app.ignoreAPIProducts=true
       
     - name: commit-status-update
       uses: ouzi-dev/commit-status-updater@v1.1.0
       continue-on-error: true
       if: always()
       with:
        status: "${{ job.status }}"
        addHoldComment: "true"
        pendingComment: "Deployment stage pending!"
        successComment: "Deployment stage succeeded!"
        failComment: "Deployment stage failed!"
        
     - name: Microsoft Teams Notification
       uses: skitionek/notify-microsoft-teams@master
       if: always()
       with:
        webhook_url: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
        needs: ${{ toJson(needs) }}
        job: ${{ toJson(job) }}
        steps: ${{ toJson(steps) }} 
   
   Post-Deployment:
    runs-on: ubuntu-latest
    needs: Deployment
    steps:
     - name: Checkout Repository
       uses: actions/checkout@v2
       
     - name: Getting $ENV output from "Deployment" Job & setting as environment variable 
       run: echo "ENV=${{needs.Deployment.outputs.output2}}" >> $GITHUB_ENV 
       
     - name: Debug
       run: echo ${{ env.ENV }} 
       
     - name: Getting $stable_revision_number output from "Deployment" Job & setting as environment variable  
       run: echo "stable_revision_number=${{needs.Deployment.outputs.output1}}" >> $GITHUB_ENV 
       
     - name: Integration Test through script file
       id: integration
       run: bash ./apigee-cicd-master/scripts/integration.sh
       shell: bash
       continue-on-error: true
       
     - name: Publishing Newman Integration Report to Artifacts
       uses: actions/upload-artifact@v2
       if: always()
       with:
        name: Newman Integration Report
        path: ${{ github.workspace }}/newman_report.html
       
     - name: ZAP Scan
       if: steps.integration.outcome == 'success'
       id: ZAP
       continue-on-error: true
       uses: zaproxy/action-api-scan@v0.1.0
       with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          format: openapi
          target: '${{ env.ZAP_TARGET_API_URL }}'
          cmd_options: '-z "-configFile /zap/wrk/apigee-cicd-master/zap/options.prop"'
          #fail_action: true
       
     - name: Undeploy Current & redeploy stable revision
       if: steps.integration.outcome == 'failure' || steps.ZAP.outcome == 'failure'
       id: undeploy
       run: bash ./apigee-cicd-master/scripts/undeploy.sh
       shell: bash

     - name: Undeploy Check
       if: steps.undeploy.outcome == 'success'
       run: |
        echo "Integration/ZAP test Failed. Failing the Job!"
        exit 1
       
     - name: commit-status-update
       uses: ouzi-dev/commit-status-updater@v1.1.0
       continue-on-error: true
       if: always()
       with:
        status: "${{ job.status }}"
        addHoldComment: "true"
        pendingComment: "Post-Deployment stage pending!"
        successComment: "Post-Deployment stage succeeded!"
        failComment: "Post-Deployment stage failed!"
     
     - name: Microsoft Teams Notification
       uses: skitionek/notify-microsoft-teams@master
       if: always()
       with:
        webhook_url: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
        needs: ${{ toJson(needs) }}
        job: ${{ toJson(job) }}
        steps: ${{ toJson(steps) }}   