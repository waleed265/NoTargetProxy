name: Apigee_CICD_Pipeline_MAF_1
on:
  # pull_request:
    # types: [opened]
    # branches:
    # - main
    # - DEV
  
  push:
    branches:
    - DEV
    
  workflow_dispatch:
  
env:
  ProxyName: NoTargetProxy
  ORG: maf-holding
  base64encoded: ${{ secrets.base64encoded }}
  ENV: prod
  apigeeUsername: ${{ secrets.apigeeUsername }}
  apigeePassword: ${{ secrets.apigeePassword }}
  api_product: Cicd-Prod-Product
  developer: hr@api.com
  app: hrapp
  NEWMAN_TARGET_URL: NoTargetProxy_GET_Req_Pass_New.postman_collection.json
  LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}
  ZAP_TARGET_API_URL: https://rimshaaizaz-eval-prod.apigee.net/notargetproxy
  
jobs:

   # Pre-Deployment:
    # runs-on: ubuntu-latest 
    # steps:
     # - name: Checkout Repository
       # uses: actions/checkout@v2
    
     # - name: Unit-Test-With-Coverage
       # run: cd ${{ github.workspace }}/apigee-cicd-master && npm install && npm test test/unit/*.js && npm run coverage test/unit/*.js
      
     # - name: Coverage
       # run: cd ${{ github.workspace }}/apigee-cicd-master/coverage && ls 
      
     # - name: Publish Unit Test Results
       # uses: EnricoMi/publish-unit-test-result-action@v1
       # if: always()
       # with:
        # files: ${{ github.workspace }}/**/test-results.xml    
      
     # - name: Cobertura Coverage Report
       # uses: 5monkeys/cobertura-action@master
       # with:
        # path: ${{ github.workspace }}/apigee-cicd-master/coverage/cobertura-coverage.xml
        # repo_token: ${{ secrets.GITHUB_TOKEN }}
        # minimum_coverage: 75
        # skip_covered: false
        # fail_below_threshold: true
        # show_line: true
        # show_branch: true
        # show_class_names: true
        # show_missing: true
        # only_changed_files: false
    
     # - name: Policy-Code-Analysis
       # run: |
        # cd ${{ github.workspace }}/apigee-cicd-master
        # sudo npm install -g apigeelint
        # apigeelint -s ${{ env.ProxyName }}/apiproxy -f table.js
        # apigeelint -s ${{ env.ProxyName }}/apiproxy -f html.js > ${{ github.workspace }}/reports/apigeelint.html
        
     # - name: Publishing Apigee Lint Report to Artifacts
       # uses: actions/upload-artifact@v2
       # if: always()
       # with:
        # name: Apigee Lint Report
        # path: ${{ github.workspace }}/reports/apigeelint.html
        
     # - name: commit-status-update
       # uses: ouzi-dev/commit-status-updater@v1.1.0
       # continue-on-error: true
       # if: always()
       # with:
        # status: "${{ job.status }}"
        # addHoldComment: "true"
        # pendingComment: "Pre-Deployment stage pending!"
        # successComment: "Pre-Deployment stage succeeded!"
        # failComment: "Pre-Deployment stage failed!"
     
     # - name: Microsoft Teams Notification
       # uses: skitionek/notify-microsoft-teams@master
       # if: always()
       # with:
        # webhook_url: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
        # needs: ${{ toJson(needs) }}
        # job: ${{ toJson(job) }}
        # steps: ${{ toJson(steps) }}
   
   Deployment:
    runs-on: ubuntu-latest
    # needs: Pre-Deployment
    # outputs:
      # output1: ${{ steps.step1.outputs.stable_revision_number }}
    steps:
     - name: Checkout Repository
       uses: actions/checkout@v2
      
     # - name: Checking Current Stable Revision
       # run: bash ./apigee-cicd-master/scripts/revision.sh
       # shell: bash
      
     # - name: Echo Current Stable Revision
       # id: step1
       # run: echo "::set-output name=stable_revision_number::$stable_revision_number"
       #run: echo "stable_revision_number=$stable_revision_number"
      
     # - name: Install fixed Maven Plugin
       # run: mvn install -f ${{ github.workspace }}/apigee-config-maven-plugin-master/pom.xml
      
     - name: Decrypt edge.json file
       run: bash ./apigee-cicd-master/scripts/decrypt_secret.sh
       shell: bash
      
     - name: Deploy Proxy
       run: mvn clean install -f ${{ github.workspace }}/apigee-cicd-master/${{ env.ProxyName }}/pom.xml -Ptest -Dusername=apigee.cicduser1@maf.ae -Dpassword=cicduser$ -Dorg=${{ env.ORG }} -Dauthtype=oauth -Dbearer=eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJmMjVjZTcyMy1jMTc0LTQ2NzYtOTM0OC02OGIzYzY4ODZjOTQiLCJzdWIiOiIyNzg4ODg1NS02ZWM4LTQ1MGUtODI5My0zMWJlMzBjNjczOGQiLCJzY29wZSI6WyJzY2ltLmVtYWlscy5yZWFkIiwic2NpbS5tZSIsIm9wZW5pZCIsInBhc3N3b3JkLndyaXRlIiwiYXBwcm92YWxzLm1lIiwic2NpbS5pZHMucmVhZCIsIm9hdXRoLmFwcHJvdmFscyJdLCJjbGllbnRfaWQiOiJlZGdlY2xpIiwiY2lkIjoiZWRnZWNsaSIsImF6cCI6ImVkZ2VjbGkiLCJncmFudF90eXBlIjoicGFzc3dvcmQiLCJ1c2VyX2lkIjoiMjc4ODg4NTUtNmVjOC00NTBlLTgyOTMtMzFiZTMwYzY3MzhkIiwib3JpZ2luIjoidWFhIiwidXNlcl9uYW1lIjoiYXBpZ2VlLmNpY2R1c2VyMUBtYWYuYWUiLCJlbWFpbCI6ImFwaWdlZS5jaWNkdXNlcjFAbWFmLmFlIiwiYXV0aF90aW1lIjoxNjM1NDE5ODQ5LCJhbCI6MCwicmV2X3NpZyI6IjQ5N2RiZThiIiwiaWF0IjoxNjM1NDE5ODQ5LCJleHAiOjE2MzU0NjMwNDksImlzcyI6Imh0dHBzOi8vbWFqaWQtYWwtZnV0dGFpbS1ncm91cC5sb2dpbi5hcGlnZWUuY29tIiwiemlkIjoibWFqaWQtYWwtZnV0dGFpbS1ncm91cCIsImF1ZCI6WyJlZGdlY2xpIiwic2NpbS5lbWFpbHMiLCJzY2ltIiwib3BlbmlkIiwicGFzc3dvcmQiLCJhcHByb3ZhbHMiLCJzY2ltLmlkcyIsIm9hdXRoIl19.ytKjbdGTRvSmUgkdCgGh_FTgeYCrlLPD_vegqMrtPjYzitm4j9xhOOiI-WuPDdhxX1vTIglQhLatKYPkgRYJ-YIq3GAboEnF-6eEhWp8elryJJcAq_Br0DRXedyTc_aPnYB6O0KPZPx9Ilfmy6zTetcuxOAmHIOQMCEbi0B1M8oqNf_z-7UDQ-EZYTlOipZP68qO9HVuiYdbJpoZLvbatBwDeQ2cRNKr7--yqCFfKfUQnLHTOFNYH6YhuVF0rM7p7QFkRkknyHQNTA0hnhauq0x68N5f8Gut1HPbpzxEe9jaqLvUhLYxcxvNOEpLu0G6J5p4_WfEkosgGHBc3sUuxA -Dapigee.config.options=update -Dapigee.app.ignoreAPIProducts=true 
       
     # - name: commit-status-update
       # uses: ouzi-dev/commit-status-updater@v1.1.0
       # continue-on-error: true
       # if: always()
       # with:
        # status: "${{ job.status }}"
        # addHoldComment: "true"
        # pendingComment: "Deployment stage pending!"
        # successComment: "Deployment stage succeeded!"
        # failComment: "Deployment stage failed!"
        
     # - name: Microsoft Teams Notification
       # uses: skitionek/notify-microsoft-teams@master
       # if: always()
       # with:
        # webhook_url: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
        # needs: ${{ toJson(needs) }}
        # job: ${{ toJson(job) }}
        # steps: ${{ toJson(steps) }} 
   
   # Post-Deployment:
    # runs-on: ubuntu-latest
    # needs: Deployment
    # steps:
     # - name: Checkout Repository
       # uses: actions/checkout@v2
       
     # - name: Echo Output  
       # run: echo "stable_revision_number=${{needs.Deployment.outputs.output1}}" >> $GITHUB_ENV 
       
     # # - name: Install fixed Maven Plugin
       # # run: mvn install -f ${{ github.workspace }}/apigee-config-maven-plugin-master/pom.xml
       
     # - name: Integration Test through script file
       # id: integration
       # run: bash ./apigee-cicd-master/scripts/integration.sh
       # shell: bash
       # continue-on-error: true
       
     # - name: Publishing Newman Integration Report to Artifacts
       # uses: actions/upload-artifact@v2
       # if: always()
       # with:
        # name: Newman Integration Report
        # path: ${{ github.workspace }}/reports/newman_report.html
       
     # - name: ZAP Scan
       # if: steps.integration.outcome == 'success'
       # id: ZAP
       # continue-on-error: true
       # uses: zaproxy/action-api-scan@v0.1.0
       # with:
          # token: ${{ secrets.GITHUB_TOKEN }}
          # docker_name: 'owasp/zap2docker-stable'
          # format: openapi
          # target: '${{ env.ZAP_TARGET_API_URL }}'
          # cmd_options: '-z "-configFile /zap/wrk/apigee-cicd-master/zap/options.prop"'
          # #fail_action: true
       
     # - name: Undeploy Current & redeploy stable revision
       # if: steps.integration.outcome == 'failure' || steps.ZAP.outcome == 'failure'
       # id: undeploy
       # run: bash ./apigee-cicd-master/scripts/undeploy.sh
       # shell: bash

     # - name: Undeploy Check
       # if: steps.undeploy.outcome == 'success'
       # run: |
        # echo "Integration/ZAP test Failed. Failing the Job!"
        # exit 1
       
     # - name: commit-status-update
       # uses: ouzi-dev/commit-status-updater@v1.1.0
       # continue-on-error: true
       # if: always()
       # with:
        # status: "${{ job.status }}"
        # addHoldComment: "true"
        # pendingComment: "Post-Deployment stage pending!"
        # successComment: "Post-Deployment stage succeeded!"
        # failComment: "Post-Deployment stage failed!"
     
     # - name: Microsoft Teams Notification
       # uses: skitionek/notify-microsoft-teams@master
       # if: always()
       # with:
        # webhook_url: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
        # needs: ${{ toJson(needs) }}
        # job: ${{ toJson(job) }}
        # steps: ${{ toJson(steps) }}